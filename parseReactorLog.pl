#!/usr/bin/perl -w

use bignum;

my $die_counter=0;

sub energy_converter {
 my $in= shift @_;
 my $out=hex($in);

 # if less than 18 chars, pad with zeroes
 if (length($out) < 18){
   $out = "0" x (18-length($out)) . $out;
 }

 $out =~ s/(\d{18})$/.$out/;
 $out = sprintf "%30.18f", $out;

 return $out;
}

# 0x8071531f26b7934ee87d69b2725e8b492898092b880121f3ccaaa651fc97d028,  tx hash
# 5,                                                                   index
# 7814041,                                                             block
# 0x38fafb8047fddb23b9de65611a4cfe07f65eb98934ad4d5bf545cd0e070c637f,  blockhash
# 0xB8874fCE9b702B191C306A21c7A4a101FB14a0fc,                          contract address
# 0x
# 0000000000000000000000000000000000000000000000000000000000000020  analyseReactions
# fda008503288e5abc370328150d20993fec26efe5707f2d12ab552ebb0da5e26  universeHash
# 00000000000000000000000000000000000000000000000000000000000057ca  OTOMRO
# 00000000000000000000000000000000000000000000000000000000000000e0  ? 224
# 0000000000000000000000000000000000000000000000000000000000001a20  ? 6688
# 00000000000000000000000000000000000000000000000902b6bdc2acd21903  Unused Energy returned to chemist
# 0000000000000000000000000000000000000000000000000000000000001a80
# 0000000000000000000000000000000000000000000000000000000000000001
# 0000000000000000000000000000000000000000000000000000000000000001
# 0000000000000000000000000000000000000000000000000000000000000020
# 0000000000000000000000000000000000000000000000000000000000000040
# 00000000000000000000000000000000000000000000000000000000000013a0
# 00000000000000000000000000000000000000000000000000000000000001a0
# 0000000000000000000000000000000000000000000000000000000000000220
# fda008503288e5abc370328150d20993fec26efe5707f2d12ab552ebb0da5e26
# 0000000000000000000000000000000000000000000000015b700f8dda503ad2
# 0000000000000000000000000000000000000000000000001f98b13f1f82faff
# 0000000000000000000000000000000000000000000000000000000000000260
# 00000000000000000000000000000000000000000000000000000000000002e0
# 0000000000000000000000000000000000000000000000000000000000000b20
# 0000000000000000000000000000000000000000000000000000000000000000
# 0000000000000000000000000000000000000000000000000e1c53da0e2ffd18
# 00000000000000000000000000000000000000000000000008665514c22fc777
# 00000000000000000000000000000000000000000000000013384e400d71a778
# 0000000000000000000000000000000000000000000000000000000000000000
# 0000000000000000000000000000000000000000000000000000000000000048
# 6664613030383530333238386535616263333730333238313530643230393933
# 6665633236656665353730376632643132616235353265626230646135653236
# 586333312d533236000000000000000000000000000000000000000000000000
# 0000000000000000000000000000000000000000000000000000000000000003
# 5863530000000000000000000000000000000000000000000000000000000000
# 00000000000000000000000000000000000000000000000188232802e8ed3f19
# 0000000000000000000000000000000000000000000000000000000000000040
# 0000000000000000000000000000000000000000000000000000000000000008
# 636f76616c656e74000000000000000000000000000000000000000000000000
# 0000000000000000000000000000000000000000000000000000000000000001
# 0000000000000000000000000000000000000000000000000000000000000020
# 0000000000000000000000000000000000000000000000000e2933390dae25f2
# 0000000000000000000000000000000000000000000000000ebea3d2785c6f08
# 000000000000000000000000000000000000000000000001ae361fc1451c0000
# 00000000000000000000000000000000000000000000000194eae571f8a87806
# 0000000000000000000000000000000000000000000000000a688906bd8b0000
# 0000000000000000000000000000000000000000000000000000000000000000
# 0000000000000000000000000000000000000000000000000000000000000180
# 00000000000000000000000000000000000000000000000000000000000001c0
# 0000000000000000000000000000000000000000000000003782dace9d900000
# 00000000000000000000000000000000000000000000000029a2241af62c0000
# 0000000000000000000000000000000000000000000000000000000000000200
# 0000000000000000000000000000000000000000000000000000000000000720
# 0000000000000000000000000000000000000000000000000000000000000002
# 5863000000000000000000000000000000000000000000000000000000000000
# 0000000000000000000000000000000000000000000000000000000000000008
# 6e6f6e6d6574616c000000000000000000000000000000000000000000000000
# fda008503288e5abc370328150d20993fec26efe5707f2d12ab552ebb0da5e26
# 00000000000000000000000000000000000000000000000029a2241af62c0000
# 0000000000000000000000000000000000000000000000001a6a839ebdb95ac6
# 000000000000000000000000000000000000000000000000d02ab486cedc0000
# 00000000000000000000000000000000000000000000000029a2241af62c0000
# 0000000000000000000000000000000000000000000000000000000000000120
# 0000000000000000000000000000000000000000000000000000000000000240
# 0000000000000000000000000000000000000000000000000000000000000360
# 0000000000000000000000000000000000000000000000000000000000000480
# 0000000000000000000000000000000000000000000000000000000000000008
# 0000000000000000000000000000000000000000000000000000000000000000
# 0000000000000000000000000000000000000000000000000000000000000000
# 0000000000000000000000000000000000000000000000000000000000000000
# 0000000000000000000000000000000000000000000000003782dace9d900000
# 0000000000000000000000000000000000000000000000000000000000000000
# 0000000000000000000000000000000000000000000000000000000000000000
# 0000000000000000000000000000000000000000000000000000000000000000
# 0000000000000000000000000000000000000000000000000000000000000000
# 0000000000000000000000000000000000000000000000000000000000000008
# 0000000000000000000000000000000000000000000000000000000000000000
# 0000000000000000000000000000000000000000000000000000000000000000
# 0000000000000000000000000000000000000000000000000000000000000000
# 0000000000000000000000000000000000000000000000000de0b6b3a7640000
# 0000000000000000000000000000000000000000000000000000000000000000
# 0000000000000000000000000000000000000000000000000000000000000000
# 0000000000000000000000000000000000000000000000000000000000000000
# 0000000000000000000000000000000000000000000000000000000000000000
# 0000000000000000000000000000000000000000000000000000000000000008
# 0000000000000000000000000000000000000000000000000000000000000000
# 0000000000000000000000000000000000000000000000000000000000000000
# 0000000000000000000000000000000000000000000000000000000000000000
# 00000000000000000000000000000000000000000000000029a2241af62c0000
# 0000000000000000000000000000000000000000000000000000000000000000
# 0000000000000000000000000000000000000000000000000000000000000000
# 0000000000000000000000000000000000000000000000000000000000000000
# 0000000000000000000000000000000000000000000000000000000000000000
# 0000000000000000000000000000000000000000000000000000000000000004
# 000000000000000000000000000000000000000000000000d02ab486cedc0000
# 00000000000000000000000000000000000000000000000053444835ec580000
# 0000000000000000000000000000000000000000000000001bc16d674ec80000
# 0000000000000000000000000000000000000000000000000000000000000000
# 000000000000000000000000000000000000000000000000d02ab486cedc0000
# 000000000000000000000000000000000000000000000000de0b6b3a76400000
# 000000000000000000000000000000000000000000000001ae361fc1451c0000
# 0000000000000000000000000000000000000000000000000e869af4de12bfc7
# 00000000000000000000000000000000000000000000000000000000000000a0
# 0000000000000000000000000000000000000000000000000000000000000006
# 737461626c650000000000000000000000000000000000000000000000000000
# 0000000000000000000000000000000000000000000000000000000000000001
# 0000000000000000000000000000000000000000000000000000000000000020
# 000000000000000000000000000000000000000000000000116f7e0611d4d50c
# 0000000000000000000000000000000000000000000000001b855f4f279cf8a6
# 00000000000000000000000000000000000000000000000168d28e3f00280000
# 000000000000000000000000000000000000000000000000b5f2f68ec3800f44
# 00000000000000000000000000000000000000000000000001280f39a3485551
# 0000000000000000000000000000000000000000000000000000000000000001
# 0000000000000000000000000000000000000000000000000000000000000180
# 00000000000000000000000000000000000000000000000000000000000001c0
# 0000000000000000000000000000000000000000000000003782dace9d900000
# 0000000000000000000000000000000000000000000000000de0b6b3a7640000
# 0000000000000000000000000000000000000000000000000000000000000200
# 0000000000000000000000000000000000000000000000000000000000000720
# 0000000000000000000000000000000000000000000000000000000000000001
# 5300000000000000000000000000000000000000000000000000000000000000
# 0000000000000000000000000000000000000000000000000000000000000008
# 616c6b616c696e65000000000000000000000000000000000000000000000000
# fda008503288e5abc370328150d20993fec26efe5707f2d12ab552ebb0da5e26
# 00000000000000000000000000000000000000000000000029a2241af62c0000
# 000000000000000000000000000000000000000000000000177e9028e0bdcbd9
# 000000000000000000000000000000000000000000000000b469471f80140000
# 00000000000000000000000000000000000000000000000029a2241af62c0000
# 0000000000000000000000000000000000000000000000000000000000000120
# 0000000000000000000000000000000000000000000000000000000000000240
# 0000000000000000000000000000000000000000000000000000000000000360
# 0000000000000000000000000000000000000000000000000000000000000480
# 0000000000000000000000000000000000000000000000000000000000000008
# 0000000000000000000000000000000000000000000000000000000000000000
# 0000000000000000000000000000000000000000000000000000000000000000
# 0000000000000000000000000000000000000000000000000000000000000000
# 0000000000000000000000000000000000000000000000003782dace9d900000
# 0000000000000000000000000000000000000000000000000000000000000000
# 0000000000000000000000000000000000000000000000000000000000000000
# 0000000000000000000000000000000000000000000000000000000000000000
# 0000000000000000000000000000000000000000000000000000000000000000
# 0000000000000000000000000000000000000000000000000000000000000008
# 0000000000000000000000000000000000000000000000000000000000000000
# 0000000000000000000000000000000000000000000000000000000000000000
# 0000000000000000000000000000000000000000000000000000000000000000
# 00000000000000000000000000000000000000000000000029a2241af62c0000
# 0000000000000000000000000000000000000000000000000000000000000000
# 0000000000000000000000000000000000000000000000000000000000000000
# 0000000000000000000000000000000000000000000000000000000000000000
# 0000000000000000000000000000000000000000000000000000000000000000
# 0000000000000000000000000000000000000000000000000000000000000008
# 0000000000000000000000000000000000000000000000000000000000000000
# 0000000000000000000000000000000000000000000000000000000000000000
# 0000000000000000000000000000000000000000000000000000000000000000
# 0000000000000000000000000000000000000000000000000de0b6b3a7640000
# 0000000000000000000000000000000000000000000000000000000000000000
# 0000000000000000000000000000000000000000000000000000000000000000
# 0000000000000000000000000000000000000000000000000000000000000000
# 0000000000000000000000000000000000000000000000000000000000000000
# 0000000000000000000000000000000000000000000000000000000000000004
# 000000000000000000000000000000000000000000000000b469471f80140000
# 00000000000000000000000000000000000000000000000053444835ec580000
# 0000000000000000000000000000000000000000000000001bc16d674ec80000
# 0000000000000000000000000000000000000000000000000000000000000000
# 000000000000000000000000000000000000000000000000b469471f80140000
# 000000000000000000000000000000000000000000000000b469471f80140000
# 00000000000000000000000000000000000000000000000168d28e3f00280000
# 0000000000000000000000000000000000000000000000000bdeb6f4c9d06d70
# 00000000000000000000000000000000000000000000000000000000000000a0
# 0000000000000000000000000000000000000000000000000000000000000005
# 616c706861000000000000000000000000000000000000000000000000000000
# 0000000000000000000000000000000000000000000000000000000000000525
# 646174613a6170706c69636174696f6e2f6a736f6e3b6261736536342c65794a
# 755957316c496a6f6957474e54494531766247566a6457786c49697769615731
# 685a3255694f694a6f64485277637a6f764c334279623251746233527662584d
# 75637a4d7564584d745a57467a644330784c6d467459587076626d4633637935
# 6a623230766233527662584d765a6d52684d4441344e54417a4d6a67345a5456
# 68596d4d7a4e7a417a4d6a67784e54426b4d6a41354f544e6d5a574d794e6d56
# 6d5a5455334d44646d4d6d51784d6d46694e5455795a574a694d4752684e5755
# 794e6c686a4d7a4574557a49324c585276613256754c6e42755a794973496d4e
# 6f6158424a6257466e5a534936496d68306448427a4f69387663484a765a4331
# 76644739746379357a4d7935316379316c59584e304c54457559573168656d39
# 755958647a4c6d4e7662533976644739746379396d5a4745774d4467314d444d
# 794f44686c4e574669597a4d334d444d794f4445314d4751794d446b354d325a
# 6c597a49325a575a6c4e5463774e3259795a444579595749314e544a6c596d49
# 775a4745315a54493257474d7a4d5331544d6a59745932687063433577626d63
# 694c434a686448527961574a316447567a496a706265794a30636d4670644639
# 306558426c496a6f69546d46745a534973496e5a686248566c496a6f6957474e
# 54496e307365794a30636d4670644639306558426c496a6f6951574e3061585a
# 6864476c7662694246626d56795a336b694c434a32595778315a5349364d6a55
# 754d444d314e5449334e444d774e4467774d44673066537837496e527959576c
# 3058335235634755694f694a535957527064584d694c434a32595778315a5349
# 364d6934794e7a59334e6a51304f54597a4d4455314d546b3066537837496e52
# 7959576c3058335235634755694f694a4e59584e7a49697769646d4673645755
# 694f6a553366537837496e527959576c3058335235634755694f694a43623235
# 6b49465235634755694c434a32595778315a534936496d4e76646d46735a5735
# 30496e307365794a30636d4670644639306558426c496a6f69516d39755a4342
# 5464484a6c626d643061434973496e5a686248566c496a6f794f4334794e5459
# 304e7a49304f4441774d5455314d7a4a394c48736964484a686158526664486c
# 775a534936496b6470646d6c755a7942426447397463794973496e5a68624856
# 6c496a6f6957474d6966537837496e527959576c3058335235634755694f694a
# 535a574e6c61585a70626d63675158527662584d694c434a32595778315a5349
# 36496c4d6966537837496e527959576c3058335235634755694f694a46624756
# 6a64484a705932467349454e76626d523159335270646d6c3065534973496e5a
# 686248566c496a6f7766537837496e527959576c3058335235634755694f694a
# 55614756796257467349454e76626d523159335270646d6c3065534973496e5a
# 686248566c496a6f784c6a41784e6a63334f5467784d5467344e4467354d5452
# 394c48736964484a686158526664486c775a534936496c52766457646f626d56
# 7a63794973496e5a686248566c496a6f774c6a59774e5449324e4463304e7a55
# 334d7a55794f4452394c48736964484a686158526664486c775a534936496b68
# 68636d52755a584e7a49697769646d4673645755694f6a45754d7a67304f5451
# 794f5449794e4449324f44557a4d6e307365794a30636d467064463930655842
# 6c496a6f695248566a64476c736158523549697769646d4673645755694f6a42
# 395858303d000000000000000000000000000000000000000000000000000000
# 0000000000000000000000000000000000000000000000000000000000000002
# c8199ec353b4c2e56af59b301f952af9c0af1429b0e4a3f5274bd3d58d1d0cca otom 26 13  S
# f03d13aa32bc579b0da684164ce7cdffb18d369b38cb740a6e06e25f98cfc76c otom 31 15 Xc
# 0000000000000000000000000000000000000000000000000000000000000001
# 0000000000000000000000000000000000000000000000000000000000000020
# 0000000000000000000000000000000000000000000000000000000000000008
# 6368656d6963616c000000000000000000000000000000000000000000000000,0x  "chemical" reaction type 
# c0f8b085f29937f83b38ec1145a97b1710a494199ad9db84b9f7ec5e2c81da29,0x
# 00000000000000000000000000000000000000000000000000000000000057ca,0x   OTMORO 22474 again
# 000000000000000000000000251183363307aa24e403efbb3d5637f66f56fc5e,



my %db = ();

# %db = ( #keys are OTOMRO numbers
#  
#  "22474" = {
#            txhash_initiate = "0x02f88bd7b0bfb18c38e79d27feb0dd1ebc00b8e199a83de744b92ae8b4a28303"
#            otoms_in        = ["Xc-31", "S-26)"],  # array of strings?
#            nrg_in          = 200                  # integer
#            chemist         = 0x251183363307aa24e403eFBb3d5637f66f56FC5E # wallet address
#
#            txhash_analyse = "0x8071531f26b7934ee87d69b2725e8b492898092b880121f3ccaaa651fc97d028"
#            otoms_out     = ["XcS(Xc-31>S-26)" ],  # array of strings?
#            nrg_out       = 166.17                 # decimal rounded to hundreths
#            reaction_type = "chemical"             # string
#            },
#
# );

my $linecounter=0;
my $txhash="";
foreach $line (<>){
  $linecounter++;

  my $otomro=0;
  my $reaction_inuts="";
  my $reaction_outputs="";
  my $energy_input=0;
  my $chemist="";


  chomp $line;

  if ($line =~ /^0x([^,]+),/){
    $txhash=$1;
  }

  $line =~ s/^[^,]+,//; # remove the tx hash
  $line =~ s/^[^,]+,//; # remove the index
  $line =~ s/^[^,]+,//; # remove the block number
  $line =~ s/^[^,]+,//; # remove the block hash
  $line =~ s/^[^,]+,//; # remove the contract address

  #
  # is it a call to analyseReactions() or initiateReaction()
  #
if ($line =~ /^0x0000000000000000000000000000000000000000000000000000000000000040/) {
#LOG DATA: 0xfb8c7b71a6967e158db42cebd73e97c6139ca314a934d3b234091427686a78ef,4,7672927,0x369fe68b745762e5ab58821fd0764a12b013ac6c7ca8c7944a82a29edddb8e30,0xB8874fCE9b702B191C306A21c7A4a101FB14a0fc,0x000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000010f0cf064dd592000000000000000000000000000000000000000000000000000000000000000000002ebbb91e512eeb497c0bfdfe429624f826c572214ce70f367972ab76ecb63f875f4a58b49b138a5dd8c5bae75b7e9b22476605d9700a0d2abf23d3f87da849b85,0xca76b0b22ff330b3394635a49de4b1ce2193cb9661943156f41635aedff5455f,0xfda008503288e5abc370328150d20993fec26efe5707f2d12ab552ebb0da5e26,0x00000000000000000000000000000000000000000000000000000000000056c6,0x000000000000000000000000620051b8553a724b742ae6ae9cc3585d29f49848

#LOG DATA: 
# 
# 0xfb8c7b71a6967e158db42cebd73e97c6139ca314a934d3b234091427686a78ef,  # tx hash
# 4,                                                                   # index
# 7672927,                                                             # block number
# 0x369fe68b745762e5ab58821fd0764a12b013ac6c7ca8c7944a82a29edddb8e30,  # block hash
# 0xB8874fCE9b702B191C306A21c7A4a101FB14a0fc,                          # contract address
# 0x0000000000000000000000000000000000000000000000000000000000000040   # data
#   00000000000000000000000000000000000000000000010f0cf064dd59200000   # input NRG
#   0000000000000000000000000000000000000000000000000000000000000002   # number of input otoms
#   ebbb91e512eeb497c0bfdfe429624f826c572214ce70f367972ab76ecb63f875
#   f4a58b49b138a5dd8c5bae75b7e9b22476605d9700a0d2abf23d3f87da849b85,
# 0xca76b0b22ff330b3394635a49de4b1ce2193cb9661943156f41635aedff5455f,
# 0xfda008503288e5abc370328150d20993fec26efe5707f2d12ab552ebb0da5e26,
# 0x00000000000000000000000000000000000000000000000000000000000056c6,
# 0x000000000000000000000000620051b8553a724b742ae6ae9cc3585d29f49848

 # trim off 0x40 which indicates the call to initiateReaction()
 $line =~ s/0x0000000000000000000000000000000000000000000000000000000000000040//; 

  #
  # Get Energy input
  #
  
  $energy_input = energy_converter( substr($line, 0, 64,""));

  #
  # Get the chemist and OTOMRO (OTOM Reaction Outputs) number
  #
  if ($line =~ /0000000000000000000000(\w{6}),0x0{24}(\w{40}),?\s*$/){
    $otomro = eval "0x$1";
    $chemist = "0x$2";
  }

  print "initiateReaction OTOMRO $otomro CHEMIST $chemist INPUT NRG $energy_input\n";

}elsif ($line =~ /^0x0000000000000000000000000000000000000000000000000000000000000020/){


  # 0x
  # 0000000000000000000000000000000000000000000000000000000000000020 <-- analyseReactions called
  # fda008503288e5abc370328150d20993fec26efe5707f2d12ab552ebb0da5e26 <-- unverseHash for Universe Alpha
  # 00000000000000000000000000000000000000000000000000000000000057ca <-- OTOMRO  22474
  # 00000000000000000000000000000000000000000000000000000000000000e0 <-- dec 224 ?
  # 0000000000000000000000000000000000000000000000000000000000001a20 <-- dec 6688 ?
  # 00000000000000000000000000000000000000000000000902b6bdc2acd21903 <-- Unused Energy returned

  #
  # Get Energy output
  #
  my $energy_returned=0;
  if ($line =~ /^0x0000000000000000000000000000000000000000000000000000000000000020fda008503288e5abc370328150d20993fec26efe5707f2d12ab552ebb0da5e26\w{64}\w{64}\w{64}\w{44}(\w{20})/g){
    $energy_returned = energy_converter($1);
  }

  #
  # Get the OTOMRO (OTOM Reaction Outputs) number
  #
  if ($line =~ /0000000000000000000000(\w\w\w\w\w\w),0x\w+,\s*$/){
    $otomro = eval "0x$1";
  }

  #
  # Get OTOM outputs
  #
  @matches = $line =~ (/(..66646130303835303332383865356162633337303332383135306432303939336665633236656665353730376632643132616235353265626230646135653236.{128}.{30})/g);

###   print "DEBUG: ". scalar(@matches) ." matches\n";
###   print "DEBUG: LINE $linecounter: ";
###   print "DEBUG $_  " for @matches;
###   print "DEBUG: \n";
###   print "DEBUG: \n";

# NOW we have

#                                                               48
# 6664613030383530333238386535616263333730333238313530643230393933
# 6665633236656665353730376632643132616235353265626230646135653236
# 586333312d533236000000000000000000000000000000000000000000000000
# 0000000000000000000000000000000000000000000000000000000000000003
# 5863530000000000000000000000000000000000000000000000000000000000

  foreach $m (@matches){
#    substr EXPR,OFFSET,LENGTH,REPLACEMENT

### print "DEBUG:" . "=" x 88 ."\n";
### print "DEBUG: 1st m=($m)\n";
# 1st $m="4866646130303835303332383865356162633337303332383135306432303939336665633236656665353730376632643132616235353265626230646135653236586333312d53323600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000035863530000000000000000000000000000000000000000000000000000000000"
     $char_hex_string= substr $m,0,2,"";          # remove the hexadecimal count of base64 encoded chars
### print "DEBUG: char_hex_string($char_hex_string)\n";
### print "DEBUG: now m=($m)\n";

# now $m="66646130303835303332383865356162633337303332383135306432303939336665633236656665353730376632643132616235353265626230646135653236586333312d53323600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000035863530000000000000000000000000000000000000000000000000000000000"


     $char_count= eval "0x$char_hex_string";      # char_count = 0x48 == 72 base64 encoded chars
### print "DEBUG: char_count=($char_count)\n";  # prints 72

     $chem_output = substr $m, 0, $char_count * 2;    # chem_output = "66646130303835303332383865356162633337303332383135306432303939336665633236656665353730376632643132616235353265626230646135653236586333312d533236"
### print "DEBUG: chem_output=($chem_output)\n";




     $chem_output = substr $chem_output, 128 ;   # chem_output = "586333312d533236"
### print "DEBUG: chem_output=($chem_output)\n";




     my @bits = ($chem_output =~ m/(..)/g);
###      print "DEBUG: bits array[" . join (",",@bits) ."]\n";
     # bits array[58,63,33,31,2d,53,32,36]
 
     $decoded_string="";
     foreach my $b ( @bits){
       my $charified = chr eval "0x$b";
###        print "DEBUG: charifying bit [$b] is [$charified]\n";
       $decoded_string.="$charified";
     }



### print "DEBUG: decoded_string($decoded_string)\n"; # decoded_string(Xc31-S26)

     $save_this_n = substr $m, 252,4; # save_this = "0003"
### print "DEBUG: save_this_n[$save_this_n]\n";
     $save_count  = eval "0x$save_this_n";
### print "DEBUG: save_count[$save_count]\n";
     $save_this   = substr $m, 256, $save_count * 2;   # save_this = "586353"
###print "DEBUG: save_this[$save_this]\n";
     my @savebits = ($save_this =~ m/(..)/g);
     $alt_decoded_string="";
     foreach my $b ( @savebits){
       my $charified = chr eval "0x$b";
       $alt_decoded_string.="$charified";
     }
###print "DEBUG: alt_decoded_string[$alt_decoded_string]\n";
###print "DEBUG: LINE $linecounter decoded_string($decoded_string)\n";

 #example decoded_string     = "W4,W5-Dx17"
 #example alt_decoded_string = "W₂Dx"

   if ($decoded_string =~ /^([A-Za-z]+)(\d+)-$/){ # "Cq6-"
     $reaction_outputs .= sprintf " + %s-%d",$1,$2;
   } else {
    #replace the "-" with ">" to show its the giving otoms
    $decoded_string =~ s/-/>/; #  "W4,W5-Dx17" =>  "W4,W5>Dx17"

    # add dashes
    $decoded_string =~ s/\b([A-Za-z]+)(\d+)/$1-$2/g; #  "W-4,W-5-Dx-17"
    $reaction_outputs .= sprintf " + %s(%s)", $alt_decoded_string, $decoded_string;
   }

 }


 # 
 # get reaction types
 # 

# this might be tricky. There doesnt seem to be way to find it except its at the end of the data.

# example
# 0000000000000000000000000000000000000000000000000000000000000001  1 object follows
# f8091cfdf63cb51cce921a520a191782ecd9b63ee16bab2f648c55c2e9a5e4dc  hex token id for Dx-19 (112189688167929084055883402287139204325716886866799699205469986433414306587868)
# 0000000000000000000000000000000000000000000000000000000000000002  2 objects follow
# 0000000000000000000000000000000000000000000000000000000000000040   64 hexchars
# 0000000000000000000000000000000000000000000000000000000000000080   128 hexchars
# 0000000000000000000000000000000000000000000000000000000000000007   7 base64 chars follow
# 6e75636c65617200000000000000000000000000000000000000000000000000  "nuclear" reaction type
# 0000000000000000000000000000000000000000000000000000000000000008   8 base64 chars follow
# 6d6574616c6c6963000000000000000000000000000000000000000000000000  "metallic" reaction type

# another
# 0000000000000000000000000000000000000000000000000000000000000002 2 objects follow
# c8199ec353b4c2e56af59b301f952af9c0af1429b0e4a3f5274bd3d58d1d0cca otom 26 13  S
# f03d13aa32bc579b0da684164ce7cdffb18d369b38cb740a6e06e25f98cfc76c otom 31 15 Xc
# 0000000000000000000000000000000000000000000000000000000000000001
# 0000000000000000000000000000000000000000000000000000000000000020
# 0000000000000000000000000000000000000000000000000000000000000008
# 6368656d6963616c000000000000000000000000000000000000000000000000,0x  "chemical" reaction type 
# c0f8b085f29937f83b38ec1145a97b1710a494199ad9db84b9f7ec5e2c81da29,0x  some hash
# 00000000000000000000000000000000000000000000000000000000000057ca,0x   OTMORO again
# 000000000000000000000000251183363307aa24e403efbb3d5637f66f56fc5e,     #chemist?


 # maybe just snip off the ending
my $snipped="";
 $line =~ s/\s*$//;
                          ###print "last 2 64 64[[". substr($line, -130, 2) ." ". substr($line, -128, 64) ." ".  substr($line, -64, 64)   ."]]<--before snipping\n";
 $line =~ s/[^,]+,\s*$//; ###print "last 2 64 64[[". substr($line, -130, 2) ." ". substr($line, -128, 64) ." ".  substr($line, -64, 64)   ."]]\n";  # trim off chemist wallet address
 $line =~ s/[^,]+,\s*$//; ###print "last 2 64 64[[". substr($line, -130, 2) ." ". substr($line, -128, 64) ." ".  substr($line, -64, 64)   ."]]\n";  # trim off OTOMRO number
 $line =~ s/[^,]+,\s*$//; ###print "last 2 64 64[[". substr($line, -130, 2) ." ". substr($line, -128, 64) ." ".  substr($line, -64, 64)   ."]]\n";  # trim off some hash
 $line =~ s/,\s*$//;      ###print "last 2 64 64[[". substr($line, -130, 2) ." ". substr($line, -128, 64) ." ".  substr($line, -64, 64)   ."]]\n";  # trim off final comma
 

# These I BELIEVE are the only 4 possiblities (besides "none" which has no entry so the UI must interpret that)
# decay    = 6465636179         => prepend with number of encoded chars and pad it  => /00056465636179000000000000000000000000000000000000000000000000000000$/
# chemical = 6368656d6963616c   => prepend with number of encoded chars and pad it  => /00086368656d6963616c000000000000000000000000000000000000000000000000$/
# nuclear  = 6e75636c656172     => prepend with number of encoded chars and pad it  => /00076e75636c65617200000000000000000000000000000000000000000000000000$/
# metallic = 6d6574616c6c6963   => prepend with number of encoded chars and pad it  => /00086d6574616c6c6963000000000000000000000000000000000000000000000000$/
my @reaction_types=();
for ( 1 .. 7 ){

    if ($line =~ /00000000000000000000000000000000000000000000000000000000000000056465636179000000000000000000000000000000000000000000000000000000$/){push @reaction_types, "decay"    }
 elsif ($line =~ /00000000000000000000000000000000000000000000000000000000000000076e75636c65617200000000000000000000000000000000000000000000000000$/){push @reaction_types, "nuclear"  }
 elsif ($line =~ /00000000000000000000000000000000000000000000000000000000000000086368656d6963616c000000000000000000000000000000000000000000000000$/){push @reaction_types, "chemical" }
 elsif ($line =~ /00000000000000000000000000000000000000000000000000000000000000086d6574616c6c6963000000000000000000000000000000000000000000000000$/){push @reaction_types, "metallic" }
 $line =~ s/.{64}\s*$//; # trim last 64

###  print "last 2 64 64[[". substr($line, -130, 2) ." ". substr($line, -128, 64) ." ".  substr($line, -64, 64)   ."]]\n";

 }

my $reaction_string="";
if (@reaction_types){
 $reaction_string = join (", ", @reaction_types);
}else{
 $reaction_string = "none";
}




 printf "OTOMRO %8d |%-70.70s | %10.2f | %s |\n",$otomro, $reaction_outputs, $energy_returned, $reaction_string;
}

}
